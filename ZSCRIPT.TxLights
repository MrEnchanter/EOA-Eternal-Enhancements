version "3.7.2"

// This will place lights on textures
// Meant for vanilla maps
// 3D floors are not supported (not until Graf pulls my goddamn PR)
// Some other things aren't done yet
// There will be misalignments because I haven't bothered with handling
// pegged/unpegged flags properly yet
// The lights are static
// Stuff like making them follow scrollers or change brightness
// based on light level, or handle animations...
// All of that is left as an exercise to whoever picks this up
// because I can't be arsed to do it
// I'm abandoning this mess in its current sorry state
// Fuck all of this noise, I have better things to do than waste my time on
// this tedious nonsense
//
// I am not doing your homework
//   -- Marisa

Class TextureHotspot
{
	int xpos, ypos, r, g, b, radius, spotin, spotout;
	bool isspot;
}

Class LightTexture
{
	TextureID tex;
	Vector2 size;
	Array<TextureHotspot> hotspots;
}

Class LightTextureHandler : EventHandler
{
	Array<LightTexture> ltex;

	override void OnRegister()
	{
		ltex.Clear();
		int lmp;
		if ( (lmp = Wads.FindLump("LTEXDEFS")) == -1 ) return;
		String txt = Wads.ReadLump(lmp);
		Array<String> lines, cline;
		lines.Clear();
		txt.Split(lines,"\n",0);
		int nspots = 0;
		LightTexture ltx;
		TextureHotspot hs;
		for ( int i=0; i<lines.size(); i++ )
		{
			if ( (lines[i].CharAt(0) == "#")
				|| (lines[i].Length() <= 1) ) continue;
			cline.Clear();
			lines[i].Split(cline," ",0);
			if ( nspots )
			{
				if ( (cline.size() != 6) && (cline.size() != 8) )
				{
					Console.Printf("LTEXDEFS: line %d: expected 6 or 8 tokens, got %d.",i+1,cline.size());
					return;
				}
				hs = new("TextureHotspot");
				hs.xpos = cline[0].ToInt();
				hs.ypos = cline[1].ToInt();
				hs.r = cline[2].ToInt();
				hs.g = cline[3].ToInt();
				hs.b = cline[4].ToInt();
				hs.radius = cline[5].ToInt();
				if ( cline.size() == 8 )
				{
					hs.spotin = cline[6].ToInt();
					hs.spotout = cline[7].ToInt();
					hs.isspot = true;
				}
				else hs.isspot = false;
				ltx.hotspots.Push(hs);
				nspots--;
				continue;
			}
			if ( (cline.size() != 2) && (cline.size() != 3) )
			{
				Console.Printf("LTEXDEFS: line %d: expected 2 or 3 tokens, got %d.",i+1,cline.size());
				return;
			}
			ltx = new("LightTexture");
			if ( cline.size() == 2 )
			{
				ltx.tex = TexMan.CheckForTexture(cline[0],TexMan.Type_Any);
				nspots = cline[1].ToInt();
			}
			else
			{
				if ( cline[1] ~== "T" ) ltx.tex = TexMan.CheckForTexture(cline[0],TexMan.Type_Wall);
				else if ( cline[1] ~== "F" ) ltx.tex = TexMan.CheckForTexture(cline[0],TexMan.Type_Flat);
				else ltx.tex = TexMan.CheckForTexture(cline[0],TexMan.Type_Any);
				nspots = cline[2].ToInt();
			}
			ltx.size = TexMan.GetScaledSize(ltx.tex);
			ltx.hotspots.Clear();
			ltex.Push(ltx);
		}
		if ( nspots ) Console.Printf("LTEXDEFS: reached EOF when %d more hotspot definitions were expected",nspots);
	}

	void PopulateSideSection( Side s, int part, int h, Vector3 pos, Vector2 dir, Vector2 normal )
	{
		// check texture first
		let t = s.GetTexture(part);
		if ( !t.IsValid() || t.IsNull() ) return;
		int ltx = -1;
		for ( int i=0; i<ltex.Size(); i++ )
		{
			if ( ltex[i].tex != t ) continue;
			ltx = i;
			break;
		}
		if ( ltx == -1 ) return;
		int w = int((s.v2().p-s.v1().p).length());
		double xo, yo, xs, ys;
		int tw, th;
		xo = s.GetTextureXOffset(part);
		yo = s.GetTextureYOffset(part);
		xs = s.GetTextureXScale(part);
		ys = s.GetTextureYScale(part);
		// TODO properly handle pegged/unpegged flags
		// also TODO fix misalignment on upper textures
		tw = int(ltex[ltx].size.x);
		th = int(ltex[ltx].size.y);
		for ( int y=0; y<h; y++ ) for ( int x=0; x<w; x++ )
		{
			int ox = int((x+xo)*xs);
			int oy = int((y+yo)*ys);
			for ( int i=0; i<ltex[ltx].hotspots.Size(); i++ )
			{
				if ( (ox%tw == ltex[ltx].hotspots[i].xpos) && (oy%th == ltex[ltx].hotspots[i].ypos) )
				{
					if ( !level.IsPointInLevel(pos+(x*dir.x,x*dir.y,-y)+(normal.x*8.,normal.y*8.,0)) ) continue;
					let l = Actor.Spawn("PointLightAttenuated",pos+(x*dir.x,x*dir.y,-y)+(normal.x*8.,normal.y*8.,0));
					l.args[0] = ltex[ltx].hotspots[i].r;
					l.args[1] = ltex[ltx].hotspots[i].g;
					l.args[2] = ltex[ltx].hotspots[i].b;
					l.args[3] = ltex[ltx].hotspots[i].radius;
				}
			}
		}
	}

	void PopulateSectorPlane( Sector s, int part, Secplane plane )
	{
		// check texture first
		let t = s.GetTexture(part);
		if ( !t.IsValid() || t.IsNull() ) return;
		int ltx = -1;
		for ( int i=0; i<ltex.Size(); i++ )
		{
			if ( ltex[i].tex != t ) continue;
			ltx = i;
			break;
		}
		if ( ltx == -1 ) return;
		int sx = int.max, sy = int.max, ex = int.min, ey = int.min;
		// calc bounds
		for ( int i=0; i<s.lines.Size(); i++ )
		{
			if ( s.lines[i].v1.p.x < sx ) sx = int(s.lines[i].v1.p.x);
			if ( s.lines[i].v2.p.x < sx ) sx = int(s.lines[i].v2.p.x);
			if ( s.lines[i].v1.p.x > ex ) ex = int(s.lines[i].v1.p.x);
			if ( s.lines[i].v2.p.x > ex ) ex = int(s.lines[i].v2.p.x);
			if ( s.lines[i].v1.p.y < sy ) sy = int(s.lines[i].v1.p.y);
			if ( s.lines[i].v2.p.y < sy ) sy = int(s.lines[i].v2.p.y);
			if ( s.lines[i].v1.p.y > ey ) ey = int(s.lines[i].v1.p.y);
			if ( s.lines[i].v2.p.y > ey ) ey = int(s.lines[i].v2.p.y);
		}
		double xo, yo, xs, ys, ang;
		int tw, th;
		xo = s.GetXOffset(part);
		yo = s.GetYOffset(part);
		xs = s.GetXScale(part);
		ys = s.GetYScale(part);
		ang = s.GetAngle(part);	// TODO handle rotation
		tw = int(ltex[ltx].size.x);
		th = int(ltex[ltx].size.y);
		for ( int y=sy; y<ey; y++ ) for ( int x=sx; x<ex; x++ )
		{
			if ( level.PointInSector((x,y)) != s ) continue;
			int ox = int((x+xo)*xs);
			int oy = int((y+yo)*ys);
			if ( ox < 0 ) ox = tw-ox;
			if ( oy < 0 ) oy = th-oy;
			for ( int i=0; i<ltex[ltx].hotspots.Size(); i++ )
			{
				if ( (ox%tw == ltex[ltx].hotspots[i].xpos) && (oy%th == ltex[ltx].hotspots[i].ypos) )
				{
					if ( !level.IsPointInLevel((x,y,plane.ZAtPoint((x,y)))+plane.Normal*8.) ) continue;
					Actor l;
					if ( ltex[ltx].hotspots[i].isspot )
					{
						l = Actor.Spawn("SpotLightAttenuated",(x,y,plane.ZAtPoint((x,y)))+plane.Normal*8.);
						DynamicLight(l).SpotInnerAngle = ltex[ltx].hotspots[i].spotin;
						DynamicLight(l).SpotOuterAngle = ltex[ltx].hotspots[i].spotout;
						l.angle = atan2(plane.Normal.y,plane.Normal.x);
						l.pitch = asin(-plane.Normal.z);
					}
					else l = Actor.Spawn("PointLightAttenuated",(x,y,plane.ZAtPoint((x,y)))+plane.Normal*8.);
					l.args[0] = ltex[ltx].hotspots[i].r;
					l.args[1] = ltex[ltx].hotspots[i].g;
					l.args[2] = ltex[ltx].hotspots[i].b;
					l.args[3] = ltex[ltx].hotspots[i].radius;
				}
			}
		}
	}

	override void WorldLoaded( WorldEvent e )
	{
		if ( e.IsSaveGame || e.IsReopen ) return;
		for ( int i=0; i<level.Lines.Size(); i++ )
		{
			Line l = level.Lines[i];
			Vector2 n = (l.delta.y,-l.delta.x).unit();
			Vector3 p1, p2;
			p1.xy = l.v1.p;
			p2.xy = l.v2.p;
			if ( l.sidedef[1] )
			{
				// this part is a mess
				int c1, f1, c2, f2;
				c1 = int(l.frontsector.ceilingplane.ZAtPoint(l.v1.p));
				f1 = int(l.frontsector.floorplane.ZAtPoint(l.v1.p));
				c2 = int(l.backsector.ceilingplane.ZAtPoint(l.v1.p));
				f2 = int(l.backsector.floorplane.ZAtPoint(l.v1.p));
				// front upper
				p1.z = c1;
				if ( c1-c2 > 0 ) PopulateSideSection(l.sidedef[0],0,c1-c2,p1,l.delta.unit(),n);
				// front middle
				p1.z = c2;
				if ( c2-f2 > 0 ) PopulateSideSection(l.sidedef[0],1,c2-f2,p1,l.delta.unit(),n);
				// front bottom
				p1.z = f2;
				if ( f2-f1 > 0 ) PopulateSideSection(l.sidedef[0],2,f2-f1,p1,l.delta.unit(),n);
				// back upper
				p2.z = c2;
				if ( c2-c1 > 0 ) PopulateSideSection(l.sidedef[1],0,c2-c1,p2,-l.delta.unit(),-n);
				// back middle
				p2.z = c2;
				if ( c1-f1 > 0 ) PopulateSideSection(l.sidedef[1],1,c1-f1,p2,-l.delta.unit(),-n);
				// back bottom
				p2.z = f1;
				if ( f1-f2 > 0 ) PopulateSideSection(l.sidedef[1],2,f1-f2,p2,-l.delta.unit(),-n);
			}
			else
			{
				int c, f;
				c = int(l.frontsector.ceilingplane.ZAtPoint(l.v1.p));
				f = int(l.frontsector.floorplane.ZAtPoint(l.v1.p));
				p1.z = c;
				PopulateSideSection(l.sidedef[0],1,c-f,p1,l.delta.unit(),n);
			}
		}
		for ( int i=0; i<level.Sectors.Size(); i++ )
		{
			Sector s = level.Sectors[i];
			PopulateSectorPlane(s,0,s.floorplane);
			PopulateSectorPlane(s,1,s.ceilingplane);
		}
	}
}
